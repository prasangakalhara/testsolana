{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n\nconst types_1 = require(\"../types\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst usePowo = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    chainImplementation\n  } = _ref;\n  const {\n    powoFinished,\n    walletPowoInProgress,\n    refreshInProgress,\n    ownerTransactionConfirmed\n  } = state;\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  /**\n   * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n   * then resolve the promise\n   */\n\n  const waitForConfirmPOWO = (0, react_1.useCallback)( // eslint-disable-next-line @typescript-eslint/no-shadow\n  async payload => {\n    logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n      payload\n    });\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('usePowo waitForConfirmPOWO', {\n        powoFinished\n      });\n\n      if (powoFinished) {\n        resolve(payload);\n      }\n    });\n  }, [powoFinished, expectWalletConnected]);\n  /**\n   * wait until the user has provided proof of wallet ownership using their connected wallet\n   * if this was triggered from the refresh flow, dispatch events to indicate progress\n   * if not, resolve a promise when the proof is ready\n   */\n\n  const waitForPOWO = (0, react_1.useCallback)(async ( // eslint-disable-next-line @typescript-eslint/no-shadow\n  payload) => {\n    logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n    const connectedWallet = expectWalletConnected();\n\n    if (connectedWallet) {\n      logger_1.default.debug('usePowo waitForPOWO', {\n        payload,\n        publicKey: connectedWallet.publicKey\n      });\n      return new Promise(resolve => {\n        logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n          walletPowoInProgress,\n          refreshInProgress\n        });\n        chainImplementation.proveWalletOwnership().then(proof => {\n          resolve({\n            proof,\n            payload\n          });\n          dispatch({\n            type: 'walletPowoComplete'\n          });\n          dispatch({\n            type: 'civicPass_check_token_status'\n          });\n        }).catch(error => {\n          logger_1.default.error('Proof of wallet ownership error: ', error);\n          dispatch({\n            type: 'walletPowoIncomplete'\n          });\n        });\n      });\n    }\n\n    return {};\n  }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n  /**\n   * wait until the user has confirmed they want to continue the sign transaction flow\n   * then resolve the promise\n   */\n\n  const waitForTransactionConfirm = (0, react_1.useCallback)(async () => {\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('usePowo waitForTransactionConfirm', {\n        ownerTransactionConfirmed\n      });\n\n      if (ownerTransactionConfirmed) {\n        resolve();\n      }\n    });\n  }, [ownerTransactionConfirmed, expectWalletConnected]);\n  /**\n   * wait for the user sign transaction callback and then dispatch awaiting owner transaction\n   * to set the correct status while waiting for the token on chain\n   */\n\n  const waitForHandleTransaction = (0, react_1.useCallback)(async transaction => {\n    logger_1.default.debug('waitForHandleTransaction', transaction);\n\n    try {\n      await chainImplementation.handleUserSignedTransaction(transaction);\n      dispatch({\n        type: 'walletPowoComplete'\n      });\n      dispatch({\n        type: 'civicPass_check_token_status'\n      });\n    } catch (error) {\n      const errorMessage = error && error instanceof Error ? error.message : 'ChainTransaction error';\n      logger_1.default.error('waitForHandleTransaction error', errorMessage);\n      dispatch({\n        type: 'civicPass_owner_sends_chainTransactionError'\n      });\n      throw new types_1.ChainTransactionError(errorMessage);\n    }\n  }, [chainImplementation]);\n  return {\n    waitForConfirmPOWO,\n    waitForTransactionConfirm,\n    waitForHandleTransaction,\n    waitForPOWO\n  };\n};\n\nexports.default = usePowo;","map":{"version":3,"sources":["D:/testone/metaplex/js/packages/candy-machine-ui/node_modules/@civic/common-gateway-react/dist/esm/useHooks/usePOWO.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","types_1","logger_1","useWalletHooks_1","usePowo","state","dispatch","wallet","chainImplementation","powoFinished","walletPowoInProgress","refreshInProgress","ownerTransactionConfirmed","expectWalletConnected","default","waitForConfirmPOWO","useCallback","payload","debug","Promise","resolve","waitForPOWO","connectedWallet","publicKey","proveWalletOwnership","then","proof","type","catch","error","waitForTransactionConfirm","waitForHandleTransaction","transaction","handleUserSignedTransaction","errorMessage","Error","message","ChainTransactionError"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_1 = require(\"react\");\nconst types_1 = require(\"../types\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst usePowo = ({ wallet, chainImplementation }, state, dispatch) => {\n    const { powoFinished, walletPowoInProgress, refreshInProgress, ownerTransactionConfirmed } = state;\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    /**\n     * wait until the user has confirmed they want to continue the proof of wallet ownership flow\n     * then resolve the promise\n     */\n    const waitForConfirmPOWO = (0, react_1.useCallback)(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async (payload) => {\n        logger_1.default.debug('usePowo waitForConfirmPOWO before expectWalletConnected', {\n            payload,\n        });\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForConfirmPOWO', { powoFinished });\n            if (powoFinished) {\n                resolve(payload);\n            }\n        });\n    }, [powoFinished, expectWalletConnected]);\n    /**\n     * wait until the user has provided proof of wallet ownership using their connected wallet\n     * if this was triggered from the refresh flow, dispatch events to indicate progress\n     * if not, resolve a promise when the proof is ready\n     */\n    const waitForPOWO = (0, react_1.useCallback)(async (\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    payload) => {\n        logger_1.default.debug('usePowo waitForPOWO before expectWalletConnected');\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger_1.default.debug('usePowo waitForPOWO', {\n                payload,\n                publicKey: connectedWallet.publicKey,\n            });\n            return new Promise((resolve) => {\n                logger_1.default.debug('usePowo waitForPOWO walletPowoInProgress', {\n                    walletPowoInProgress,\n                    refreshInProgress,\n                });\n                chainImplementation\n                    .proveWalletOwnership()\n                    .then((proof) => {\n                    resolve({ proof, payload });\n                    dispatch({ type: 'walletPowoComplete' });\n                    dispatch({ type: 'civicPass_check_token_status' });\n                })\n                    .catch((error) => {\n                    logger_1.default.error('Proof of wallet ownership error: ', error);\n                    dispatch({ type: 'walletPowoIncomplete' });\n                });\n            });\n        }\n        return {};\n    }, [expectWalletConnected, walletPowoInProgress, chainImplementation]);\n    /**\n     * wait until the user has confirmed they want to continue the sign transaction flow\n     * then resolve the promise\n     */\n    const waitForTransactionConfirm = (0, react_1.useCallback)(async () => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('usePowo waitForTransactionConfirm', { ownerTransactionConfirmed });\n            if (ownerTransactionConfirmed) {\n                resolve();\n            }\n        });\n    }, [ownerTransactionConfirmed, expectWalletConnected]);\n    /**\n     * wait for the user sign transaction callback and then dispatch awaiting owner transaction\n     * to set the correct status while waiting for the token on chain\n     */\n    const waitForHandleTransaction = (0, react_1.useCallback)(async (transaction) => {\n        logger_1.default.debug('waitForHandleTransaction', transaction);\n        try {\n            await chainImplementation.handleUserSignedTransaction(transaction);\n            dispatch({ type: 'walletPowoComplete' });\n            dispatch({ type: 'civicPass_check_token_status' });\n        }\n        catch (error) {\n            const errorMessage = error && error instanceof Error ? error.message : 'ChainTransaction error';\n            logger_1.default.error('waitForHandleTransaction error', errorMessage);\n            dispatch({ type: 'civicPass_owner_sends_chainTransactionError' });\n            throw new types_1.ChainTransactionError(errorMessage);\n        }\n    }, [chainImplementation]);\n    return {\n        waitForConfirmPOWO,\n        waitForTransactionConfirm,\n        waitForHandleTransaction,\n        waitForPOWO,\n    };\n};\nexports.default = usePowo;\n"]},"metadata":{},"sourceType":"script"}